{{/* Setting defaults if they are omitted. */}}
{{- $deployEnvironmentIKS := .Capabilities.KubeVersion.GitVersion | regexMatch "IKS" }}
{{- $usefileSystemDrive := .Values.usefileSystemDrive | default false }}
{{- $drives := .Values.drives | default "none" }}
{{- $usedrivesAndPartitions := .Values.usedrivesAndPartitions | default false }}
{{- $secretType := .Values.secretType | default "k8s" }}
{{- $journalDevice := .Values.journalDevice | default "none" }}
{{- $customRegistryURL := .Values.customRegistryURL | default "none" }}
{{- $registrySecret := .Values.registrySecret | default "none" }}
{{- $licenseSecret := .Values.licenseSecret | default "none" }}

{{- $dataInterface := .Values.dataInterface | default "none" }}
{{- $managementInterface := .Values.managementInterface | default "none" }}

{{- $envVars := .Values.envVars | default "none" }}
{{- $isCoreOS := .Values.isTargetOSCoreOS | default false }}

{{- $pksInstall := .Values.pksInstall | default false }}
{{- $internalKVDB := .Values.internalKVDB | default false }}
{{- $kvdbDevice := .Values.kvdbDevice | default "none" }}
{{- $csi := .Values.csi | default false }}

{{- $etcdCredentials := .Values.etcd.credentials | default "none:none" }}
{{- $etcdCertPath := .Values.etcd.certPath | default "none" }}
{{- $etcdCA := .Values.etcd.ca | default "none" }}
{{- $etcdCert := .Values.etcd.cert | default "none" }}
{{- $etcdKey := .Values.etcd.key | default "none" }}
{{- $consulToken := .Values.consul.token | default "none" }}
{{- $etcdEndPoints := .Values.etcdEndPoint }}
{{- $misc := .Values.misc | default "" | split " " }}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: portworx-api
  namespace: kube-system
  labels:
    name: portworx-api
spec:
  selector:
    matchLabels:
      name: portworx-api
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        name: portworx-api
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: px/enabled
                    operator: NotIn
                    values:
                      - "false"
                  - key: node-role.kubernetes.io/master
                    operator: DoesNotExist
      hostNetwork: true
      hostPID: false
      containers:
        - name: portworx-api
          image: k8s.gcr.io/pause:3.1
          imagePullPolicy: Always
          readinessProbe:
            periodSeconds: 10
            httpGet:
              host: 127.0.0.1
              path: /status
              port: 9001
      restartPolicy: Always
      serviceAccountName: px-account
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    portworx.com/install-source: https://install.portworx.com/?kbver=1.16.8-gke.6&c=portworx-demo-cluster&b=true&st=k8s&csi=true&vsp=true&ds=mydatastore-&vc=70.0.69.0&s=%22type=zeroedthick,size=150%22
  labels:
    name: portworx
  name: portworx
  namespace: kube-system
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: portworx
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: portworx
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: px/enabled
                    operator: NotIn
                    values:
                      - "false"
                  - key: node-role.kubernetes.io/master
                    operator: DoesNotExist
      containers:
        - args:
            - -c
            - ofskdjfskld
            - -s
            - size=50
            - -secret_type
            - k8s
            - -b
            - -x
            - kubernetes
          env:
            - name: ENABLE_CSI_DRIVE
              value: "true"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: PX_NAMESPACE
              value: kube-system
#            - name: PX_IMAGE
#              value: docker.io/trierra/trierra-px-enterprise:helm-testing-resolver-5
            - name: AUTO_NODE_RECOVERY_TIMEOUT_IN_SECS
              value: "1500"
            - name: PX_TEMPLATE_VERSION
              value: v4
            - name: "PRE-EXEC"
              value: "tdnf install -y linux-devel-$(uname -r)"
            - name: CSI_ENDPOINT
              value: unix:///var/lib/kubelet/plugins/pxd.portworx.com/csi.sock
            - name: REGISTRY_USER
              value: pwxbuild
            - name: REGISTRY_PASS
              value: fridaydemos
          image: portworx/oci-monitor:bc2dddb_677b632
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /status
              port: 9001
              scheme: HTTP
            initialDelaySeconds: 840
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: portworx
          readinessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /health
              port: 9015
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /tmp/px-termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/cores
              name: diagsdump
            - mountPath: /var/run/docker.sock
              name: dockersock
            - mountPath: /run/containerd
              name: containerdsock
            - mountPath: /etc/pwx
              name: etcpwx
            - mountPath: /dev
              name: dev
            - mountPath: /opt/pwx
              name: optpwx
            - mountPath: /host_proc
              name: procmount
            - mountPath: /etc/systemd/system
              name: sysdmount
            - mountPath: /var/run/log
              name: journalmount1
              readOnly: true
            - mountPath: /var/log
              name: journalmount2
              readOnly: true
            - mountPath: /var/run/dbus
              name: dbusmount
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: px-account
      serviceAccountName: px-account
      terminationGracePeriodSeconds: 30
      volumes:
        - hostPath:
            path: /var/cores
            type: ""
          name: diagsdump
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: dockersock
        - hostPath:
            path: /run/containerd
            type: ""
          name: containerdsock
        - hostPath:
            path: /etc/pwx
            type: ""
          name: etcpwx
        - hostPath:
            path: /dev
            type: ""
          name: dev
        - hostPath:
            path: /opt/pwx
            type: ""
          name: optpwx
        - hostPath:
            path: /proc
            type: ""
          name: procmount
        - hostPath:
            path: /etc/systemd/system
            type: ""
          name: sysdmount
        - hostPath:
            path: /var/run/log
            type: ""
          name: journalmount1
        - hostPath:
            path: /var/log
            type: ""
          name: journalmount2
        - hostPath:
            path: /var/run/dbus
            type: ""
          name: dbusmount
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate